What are the four basics of object-oriented programming?
Object-oriented programming has four basic concepts: encapsulation, 
abstraction, inheritance and polymorphism. Even if these concepts seem incredibly complex, understanding the general
 framework of how they work will help you understand the basis of a computer program. Here are the four basic
  theories and what they entail:

Encapsulation
Abstraction
Inheritance
Polymorphism
Encapsulation
The different objects inside of one program will try to communicate with each other automatically. 
If a programmer wants to stop objects from interacting with each other, they need to be encapsulated in individual classes. 
Through the process of encapsulation, classes cannot change or interact with the specific variables and functions of an object.

Just like a pill "encapsulates" or contains the medication inside of its coating,
 the principle of encapsulation works in a digital way to form a protective barrier around the information that separates
  it from the rest of the code. Programmers can replicate this object throughout different parts of the program or other programs.

Abstraction
Abstraction is like an extension of encapsulation because it hides certain properties and methods from the outside 
code to make the interface of the objects simpler. Programmers use abstraction for several beneficial reasons.
 Overall, abstraction helps isolate the impact of changes made to the code so that if something goes wrong, 
 the change will only affect the variables shown and not the outside code.

Inheritance
Using this concept, programmers can extend the functionality of the code's existing classes
 to eliminate repetitive code. For instance, elements of HTML code that include a text box, select 
 field and check box have certain properties in common with specific methods.

Instead of redefining the properties and methods for every type of HTML element,
 you can define them once in a generic object. Naming that object something like "HTMLElement" 
 will cause other objects to inherit its properties and methods so you can reduce unnecessary code.

The main object is the superclass and all objects that follow it are subclasses. Subclasses can have 
separate elements while adding what they need from the superclass.

Polymorphism
This technique meaning "many forms or shapes" allows programmers 
to render multiple HTML elements depending on the type of object. This concept allows programmers to redefine the way something works 
by changing how it is done or by changing the parts in which it is done. Terms of polymorphism are called overriding and overloading.